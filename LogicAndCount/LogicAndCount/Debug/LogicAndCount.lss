
LogicAndCount.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000210  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000711  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064f  00000000  00000000  000009b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000203  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bc  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014d  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000175d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:


int main(void)
{
    //  Config Timer:
    TCCR1A = 0;// set entire TCCR1A register to 0
  90:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = 0;// same for TCCR1B
  94:	e1 e8       	ldi	r30, 0x81	; 129
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	10 82       	st	Z, r1
    TCNT1  = 0;//initialize counter value to 0
  9a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  9e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    // set compare match register for 1hz increments
    OCR1A = 15624;// = (16*10^6) / (1*1024) - 1 (must be <65536) 1 sec = 15624; 0,5s = 7812
  a2:	88 e0       	ldi	r24, 0x08	; 8
  a4:	9d e3       	ldi	r25, 0x3D	; 61
  a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    // turn on CTC mode
    TCCR1B |= (1 << WGM12);
  ae:	80 81       	ld	r24, Z
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	80 83       	st	Z, r24
    // Set CS10 and CS12 bits for 1024 prescaler
    TCCR1B |= (1 << CS12) | (1 << CS10);
  b4:	80 81       	ld	r24, Z
  b6:	85 60       	ori	r24, 0x05	; 5
  b8:	80 83       	st	Z, r24
    // enable timer compare interrupt
    TIMSK1 |= (1 << OCIE1A);
  ba:	ef e6       	ldi	r30, 0x6F	; 111
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	80 83       	st	Z, r24
	
	sei();
  c4:	78 94       	sei
		//Logic Output
		PORTD = (logicOr<<PIND5);
		PORTD |= (logicAnd<<PIND6);
		PORTD |= (logicXor<<PIND7);

	PORTD = counter<<2;
  c6:	e0 e0       	ldi	r30, 0x00	; 0
  c8:	f1 e0       	ldi	r31, 0x01	; 1
		int bt0 = 1;
		int bt1 = 1;
		int bt2 = 1;
		
		//Read in input
		if (PINC &= (1<<PINC0))
  ca:	51 e0       	ldi	r21, 0x01	; 1
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	86 b1       	in	r24, 0x06	; 6
  d0:	81 70       	andi	r24, 0x01	; 1
  d2:	86 b9       	out	0x06, r24	; 6
  d4:	95 2f       	mov	r25, r21
  d6:	81 11       	cpse	r24, r1
  d8:	96 2f       	mov	r25, r22
		{
			bt0 = 0;
		}
		if (PINC &= (1<<PINC1))
  da:	26 b1       	in	r18, 0x06	; 6
  dc:	22 70       	andi	r18, 0x02	; 2
  de:	26 b9       	out	0x06, r18	; 6
  e0:	35 2f       	mov	r19, r21
  e2:	21 11       	cpse	r18, r1
  e4:	36 2f       	mov	r19, r22
		{
			bt1 = 0;
		}
		if (PINC &= (1<<PINC2))
  e6:	26 b1       	in	r18, 0x06	; 6
  e8:	24 70       	andi	r18, 0x04	; 4
  ea:	26 b9       	out	0x06, r18	; 6
  ec:	85 2f       	mov	r24, r21
  ee:	21 11       	cpse	r18, r1
  f0:	86 2f       	mov	r24, r22
		unsigned char logicOr = bt0|bt1|bt2;
		unsigned char logicAnd = bt0&bt1&bt2;
		unsigned char logicXor = (bt2^bt0^bt1);
		
		//Logic Output
		PORTD = (logicOr<<PIND5);
  f2:	23 2f       	mov	r18, r19
  f4:	29 2b       	or	r18, r25
  f6:	28 2b       	or	r18, r24
  f8:	22 95       	swap	r18
  fa:	22 0f       	add	r18, r18
  fc:	20 7e       	andi	r18, 0xE0	; 224
  fe:	2b b9       	out	0x0b, r18	; 11
		PORTD |= (logicAnd<<PIND6);
 100:	4b b1       	in	r20, 0x0b	; 11
 102:	23 2f       	mov	r18, r19
 104:	29 23       	and	r18, r25
 106:	28 23       	and	r18, r24
 108:	22 95       	swap	r18
 10a:	22 0f       	add	r18, r18
 10c:	22 0f       	add	r18, r18
 10e:	20 7c       	andi	r18, 0xC0	; 192
 110:	24 2b       	or	r18, r20
 112:	2b b9       	out	0x0b, r18	; 11
		PORTD |= (logicXor<<PIND7);
 114:	2b b1       	in	r18, 0x0b	; 11
 116:	93 27       	eor	r25, r19
 118:	89 27       	eor	r24, r25
 11a:	87 95       	ror	r24
 11c:	88 27       	eor	r24, r24
 11e:	87 95       	ror	r24
 120:	82 2b       	or	r24, r18
 122:	8b b9       	out	0x0b, r24	; 11

	PORTD = counter<<2;
 124:	80 81       	ld	r24, Z
 126:	88 0f       	add	r24, r24
 128:	88 0f       	add	r24, r24
 12a:	8b b9       	out	0x0b, r24	; 11
	if (counter++ == 7)
 12c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 130:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 134:	9c 01       	movw	r18, r24
 136:	2f 5f       	subi	r18, 0xFF	; 255
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 13e:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 142:	07 97       	sbiw	r24, 0x07	; 7
 144:	21 f6       	brne	.-120    	; 0xce <main+0x3e>
	{
		counter = 0;
 146:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 14a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 14e:	bf cf       	rjmp	.-130    	; 0xce <main+0x3e>

00000150 <__vector_11>:
    }	
}

//Timer Interrupt 
ISR(TIMER1_COMPA_vect)
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
	PORTD = counter<<2;
 15e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 162:	88 0f       	add	r24, r24
 164:	88 0f       	add	r24, r24
 166:	8b b9       	out	0x0b, r24	; 11
	if (counter++ == 7)
 168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 170:	87 30       	cpi	r24, 0x07	; 7
 172:	91 05       	cpc	r25, r1
 174:	31 f0       	breq	.+12     	; 0x182 <__vector_11+0x32>
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 17c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 180:	04 c0       	rjmp	.+8      	; 0x18a <__vector_11+0x3a>
	{
		counter = 0;
 182:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 186:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
}
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
